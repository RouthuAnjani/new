Kotlin 
This is a strongly statically typed general-purpose programming language that runs on JVM.
Kotlin is an open source programming language that combines object-oriented programming and functional features into a unique platform.
Kotlin is an object-oriented programming language that is used to develop Android-based applications. It can also be used for web development and building server-side applications.
Kotlin is used for:

Mobile applications (specially Android apps)
Web development
Server side applications
Data science
And much, much more!
fun main(args : Array<String>) {
  println("Hello World")
}
Kotlin keywords are predefined, reserved words used in Kotlin programming that have special meanings to the compiler. These words cannot be used as an identifier (variables names, package names, function names etc.) and if used then compiler will raise an exception.
Kotlin variables are created using either var or val keywords and then an equal sign = is used to assign a value to those created variables.
String Interpolation--can use + or $ to concatinate variable with statament in println
Mutable means that the variable can be reassigned to a different value after initial assignment. To declare a mutable variable, we use the var keyword
A read-only variable can be declared using val (instead of var) and once a value is assigned, it can not be re-assigned.

Data types are divided into different groups:

Numbers
Characters
Booleans
Strings
Arrays
To convert a numeric data type to another type, you must use one of the following functions: toByte(), toShort(), toInt(), toLong(), toFloat(), toDouble() or toChar()

The String data type is used to store a sequence of characters. String values must be surrounded by double quotes (" ") or triple quote (""" """).

We have two kinds of string available in Kotlin - one is called Escaped String and another is called Raw String.

Escaped string is declared within double quote (" ") and may contain escape characters like '\n', '\t', '\b' etc.

Raw string is declared within triple quote (""" """) and may contain multiple lines of text without any escape characters.
The Char data type is used to store a single character. A char value must be surrounded by single quotes, like 'A' or 'c'
An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. Kotlin is rich in built-in operators and provide the following types of operators:

Arithmetic Operators

Relational Operators

Assignment Operators

Unary Operators

Logical Operators

Bitwise Operations

You can also use the plus() function to concatenate two strings:

var firstName = "John "
var lastName = "Doe"
println(firstName.plus(lastName))

Creating Arrays in Kotlin
To create an array in Kotlin, we use the arrayOf() function, and place the values in a comma-separated list inside it:

val fruits = arrayOf("Apple", "Mango", "Banana", "Orange")
Optionally we can provide a data type as follows:

val fruits = arrayOf<String>("Apple", "Mango", "Banana", "Orange")
Alternatively, the arrayOfNulls() function can be used to create an array of a given size filled with null elements.
Primitive type Arrays
Kotlin also has some built-in factory methods to create arrays of primitive data types. For example, the factory method to create an integer array is:

val num = intArrayOf(1, 2, 3, 4)
Other factory methods available for creating arrays:

byteArrayOf()

charArrayOf()

shortArrayOf()

longArrayOf()
Kotlin also provides get() and set() member functions to get and set the value at a particular index. 
Kotlin allows to store duplicate values in an array, but same time you can get a set of distinct values stored in the array using distinct() member function.

We can use drop() or dropLast() member functions to drop elements from the beginning or from the last respectively.

Kotlin range is defined by its two endpoint values which are both included in the range. Kotlin ranges are created with rangeTo() function, or simply using downTo or (. .) operators. The main operation on ranges is contains, which is usually used in the form of in and !in operators.

To create a Kotlin range we call rangeTo() function on the range start value and provide the end value as an argument.

fun main(args: Array<String>) {
   for ( num in 1.rangeTo(4) ) {
     println(num)
   }
}
If we want to define a backward range we can use the downTo operator:

for ( num in 4 downTo 1 ) 
We can use step() function to define the distance between the values of the range.
for ( num in 1..10 step 2 )
for ( ch in 'a'..'d' ) 
The function reversed() can be used to reverse the values of a range.
for ( num in (1..5).reversed() 
The function until() can be used to create a range but it will skip the last element given.
  for ( num in 1 until 5 )
We can use first, last and step properties of a range to find the first, the last value or the step of a range.

fun main(args: Array<String>) {
   println((5..10).first)
   println((5..10 step 2).step)
   println((5..10).reversed().last)
}
The filter() function will return a list of elements matching a given predicate:

val f = a.filter { T -> T % 2 == 0 }The distinct() function will return a list of distinct values from a range having repeated values:

fun main(args: Array<String>) {
   val a = listOf(1, 1, 2, 4, 4, 6, 10)
   
   println(a.distinct())
}
Range Utility Functions
There are many other useful functions we can apply to our range, like min, max, sum, average, count
Kotlin when
Instead of writing many if..else expressions, you can use the when expression, which is much easier to read.

It is used to select one of many code blocks to be executed
The when expression is similar to the switch statement in Java.
val day = 4

val result = when (day) {
  1 -> "Monday"
  2 -> "Tuesday"
  3 -> "Wednesday"
  4 -> "Thursday"
  5 -> "Friday"
  6 -> "Saturday"
  7 -> "Sunday"
  else -> "Invalid day."
}
println(result)
The break statement is used to jump out of a loop.

The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.

Kotlin labeled break statement is used to terminate the specific loop. This is done by using break expression with @ sign followed by label name (break@LabelName).

fun main(args: Array<String>) {
    outerLoop@ for (i in 1..3) {  
        innerLoop@ for (j in 1..3) {  
            println("i = $i and j = $j")  
            if (i == 2){  
                break@outerLoop
            }  
        }  
    }  
}
A function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

Functions are used to perform certain actions, and they are also known as methods
fun myFunction(fname: String) {
  println(fname + " Doe")
}

fun main() {
  myFunction("John")
  myFunction("Jane")
  myFunction("George")
}
When a parameter is passed to the function, it is called an argument. So, from the example above: fname is a parameter, while John, Jane and George are arguments.

If a function does not return a useful value, its return type is Unit. Unit is a type with only one value which is Unit.

Higher-Order Functions
A higher-order function is a function that takes another function as parameter and/or returns a function.
Kotlin Lambda Function
Kotlin lambda is a function which has no name and defined with a curly braces {} which takes zero or more parameters and body of function.

The body of function is written after variable (if any) followed by -> operator.

Syntax
{variable with type -> body of the function}  
Kotlin Inline Function
An inline function is declared with inline keyword. The use of inline function enhances the performance of higher order function. The inline function tells the compiler to copy parameters and functions to the call site.


Passing lambda expression as a parameter to Higher-Order Function –
We can pass a lambda expression as a parameter to Higher-Order Function. 
There are two types of lambda expression which can be passed- 

Lambda expression which return Unit
Lambda expression which return any of the value integer,string etc
lmbd is local name for the receiving lambda parameter. 
() represents that the function does not accept any arguments. 
Unit represents that function does not return any value.
In Android, scope functions are a set of functions available in Kotlin that allow for concise and convenient operations on objects within a specific scope. These functions provide a way to manipulate objects and execute code within a certain context while avoiding repetitive code and improving readability. The five main scope functions in Kotlin are let, run, with, apply, and also.
Differences in these functions:

There are mainly two differences among these functions:

Way of referring to a context object (i.e. using either ‘this’ or ‘it’ keyword)
return value (i.e. returns either ‘context object’ or ‘lambda result’)
Function

Object Reference

Return Value

let

it

Lambda result

run

this

Lambda result

with

this

Lambda result

apply

this

Context object

also

it

Context object
Scope functions make code more readable, clear and concise.
Object reference – ‘this’ and ‘it’.
Return value – context object and lambda result.
let : working with nullable objects to avoid NullPointerException.
apply : changing object configuration.
run: operate on nullable object, executing lambda expressions.
also : adding additional operations.
with : operating on non-null objects.














 


















